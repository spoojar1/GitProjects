% Edge detection
clear all
clc

X=[];
Y=[];
Z=[];

th=pi/6;
num=12;
threshold=20;

%crop coordinates  i.e (c1,c2)  to (c1+w,c2+h)
c1=105;     %c1 should be approx center of original image
c2=0;     
w=105;
h=213;

c1=c1-w;                % 150 on both side of middle
w=2*w;

%view axis
x1=100;   
y1=100;    
z1=0;      
z2=100;     %   z2 > h

fol_name='images1';
q=8;  %no of columns

for no=1:1:num
    
    s=num2str(no);
    s=strcat(fol_name,'/',s,'.jpg');
    a = imread(s);
    a=imcrop(a,[c1 c2 w h]);     %(x1,y1) to (x1+w,y1+h)
    
    figure(1);    
    
    subplot(2,q,no), imshow (uint8(a));
    
    a=a(:,:,1);   % red component extraction
    [row col]=size(a);
    
    %highlighting laser pixels i.e. turning non-laser pixels to white 
    
    for x=1:1:row
        for y=1:1:col
            if(a(x,y)>20)
                a(x,y)=255;
            end;
        end;
    end;
    
    
    %thresholding i.e. selecting appropriate laser pixels and turning them black
    
    for x=1:1:row
        for y=1:1:col
            if(a(x,y)>threshold)
                a(x,y)=0;
            else
                a(x,y)=255;
            end;
        end;
    end;
    
    %figure(2);
    subplot(2,q,no), imshow (uint8(a));
    
    b=a;
    
    %noise removal
    for x=1:1:row
        z=0;
        for y=1:1:col
            if(b(x,y)==0 & z<=1)
                z=z+1;
                b(x,y)=0;
            else
                b(x,y)=255;
            end;
        end;
    end;
    
    %figure(3);
    subplot(2,q,no), imshow (b);

    % 3d co-ordinate calculation
    
    for x=1:1:row
        for y=1:1:col
            if(b(x,y)==0)
                X(no,x)=y-(col/2);  %-10 just to avoid neg values of x  here c(x,1)=x axis dist   c(x,2)=y axis dist
                break;
            end;    
        end;
    end;
    
    s=0;
    i=0;
    for x=1:1:row
        s=s+X(no,x);
        if(X(no,x)~=0)
            i=i+1;
        end
    end;
    
    if(i~=0)
        avg=s/i;
    else
        avg=s/row;
    end
    
    for x=1:1:row
        if(X(no,x)==0 | X(no,x)<(avg-10) | X(no,x)>(avg+10) )
            X(no,x)=avg;
        end
    end;
    
    for x=1:1:row
        Y(no,x)=row-x;
        Z(no,x)=X(no,x)/tan(th);    
    end;
    
    %{
    for x=1:1:row
        for y=1:1:col
            if(b(x,y)==0)
                X(no,x)=y-(col/2);  %-10 just to avoid neg values of x  here c(x,1)=x axis dist   c(x,2)=y axis dist
                Y(no,x)=row-x;
                Z(no,x)=X(no,x)/tan(th);
                break;
            end;    
        end;
    end;
    %}
    
    %disp('X');
    %disp(X);

end;    %end of main loop

%3D rotation
for z=2:1:num
    temp1=[cos(th) -sin(th) 0 0;sin(th) cos(th) 0 0;0 0 1 0;0 0 0 1];    
    for x=1:1:row
        temp2=[Z(z,x);X(z,x);Y(z,x);0];
        temp2=temp1*temp2;
        Z(z,x)=temp2(1,1);
        X(z,x)=temp2(2,1);
        Y(z,x)=temp2(3,1);
    end
    th=th+pi/6;
end 

Zc=[];
Xc=[];
Yc=[];
for z=1:1:num
    Zc=cat(2,Zc,Z(z,:));
    Xc=cat(2,Xc,X(z,:));
    Yc=cat(2,Yc,Y(z,:));
end

figure(4);
scatter3(Zc,Xc,Yc,3);
xlabel('X');
ylabel('Y');
zlabel('Z');
    
    
figure(5);

%normals with surface

[u v w]=surfnorm(Z,X,Y);  %can't use Zc,Xc,Yc here since matrices should be atleast 3X3

%normal vectors without surface
quiver3(Z,X,Y,u,v,w);


%{
%TETRAHEDRON MESH
T=delaunay3(Zc,Xc,Yc);
X = [Zc(:) Xc(:) Yc(:)];
tetramesh(T,X);
%}


%{
%TRIANGULAR MESH
T=delaunay(Zc,Xc);
trimesh(T,Zc,Xc,Yc);
%}


xlim([-x1 x1]);
ylim([-y1 y1]);
zlim([z1 z2]);


