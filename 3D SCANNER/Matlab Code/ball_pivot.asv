%function cijk = ball_pivot(i,j,o,r,c,k)
function [cijk,new_pt] = ball_pivot()

load('workspace1.mat');

bdry_edge=0;
%----------------------------------------------
fprintf(fid,'\n INSIDE BALL PIVOT \n');
%----------------------------------------------

%{
i2=v1;
j2=v2;
k2=v3;
%}
        
temp=[];
new_pt=-1;

i2=ceil((x+Xc(front(1).e1))/del);
j2=ceil((y-Yc(front(1).e1))/del);
k2=ceil((Zc(front(1).e1)+1)/del);
        
i1=i2;
j1=j2;
k1=k2;

%fprintf(fid,'\nBALL PIVOT \n CONSIDER VOXEL %d %d %d *************************************************\n',i2,j2,k2);
len=size(voxel(i1,j1,k1).ll,2);

for p=1:1:len
    
    cijk=struct('x',NaN,'y',NaN,'z',NaN);
    
    pt1=front(1).e1;
    pt2=front(1).e2;
    temp=voxel(i1,j1,k1).ll(p);
    if(temp~=pt1 && temp~=pt2 && not_used(temp,pt1,pt2))
            
        new_pt=temp;
        
        t1=sqrt((Xc(pt1)-Xc(temp))^2+(Yc(pt1)-Yc(temp))^2+(Zc(pt1)-Zc(temp))^2);
        t2=sqrt((Xc(pt2)-Xc(temp))^2+(Yc(pt2)-Yc(temp))^2+(Zc(pt2)-Zc(temp))^2);
                        
        if(t1<=del1 && t2<=del1)
            if(pt1>pt2 && pt1>temp)
                t=temp;
                temp=pt1;
                pt1=t;
            else
                if(pt2>pt1 && pt2>temp)
                    t=temp;
                    temp=pt2;
                    pt2=t;
                end
            end
        else
            continue;
        end
        
        i=struct('x',Xc(pt1),'y',Yc(pt1),'z',Zc(pt1));
        j=struct('x',Xc(pt2),'y',Yc(pt2),'z',Zc(pt2));
        c=struct('x',front(1).c(1),'y',front(1).c(2),'z',front(1).c(3));

        k=struct('x',Xc(temp),'y',Yc(temp),'z',Zc(temp));
        
        save('workspace1.mat');
        
        %----------------------------------------------
        %fprintf(fid,'point being considered %d   \n',new_pt);                    
        %----------------------------------------------
        
        cijk=help_ball_pivot();
        if(~isnan(cijk.x))
            
            %++++++++++++++++++++++++++++++++++++++++
            bdry_edge=1;
            %++++++++++++++++++++++++++++++++++++++++
            
            if(check_intersect(pt1,pt2,temp))   %returns 0 if the set does not intersect any triangle in TRI
                continue;
            end
            if(check_pts_in_sphere(cijk))
                %----------------------------------------------
                fprintf(fid,'\n hurray got it in same voxel %d %d %d \n',i1,j1,k1);
                fprintf(fid,'new point found inside ball pivot : %d \n',new_pt); 
                %----------------------------------------------
                return;
            end
        else
            %----------------------------------------------
            fprintf(fid,'sad for this point \n');
            %----------------------------------------------
        end
    end
end

for i1=i2-1:1:i2+1
    for j1=j2-1:1:j2+1
        for k1=k2-1:1:k2+1
            if((i1<1 || i1>x2) || (j1<1 || j1>y2) || (k1<1 || k1>z2) ||(i1==i2 && j1==j2 && k1==k2))  %x2 , y2 and z2 are limits on voxel cube's boundaries
                continue;
            else
                len=size(voxel(i1,j1,k1).ll,2);
                %fprintf(fid,'BALL PIVOT CONSIDER ADJACENT VOXEL %d %d %d *************************************************   len : %d\n',i1,j1,k1,len);
                for p=1:1:len
                    
                    cijk=struct('x',NaN,'y',NaN,'z',NaN);
                    
                    pt1=front(1).e1;
                    pt2=front(1).e2;
                    
                    %fprintf('p : %d \n',p);
                    %fprintf('sdsd : %d \n',voxel(i1,j1,k1).ll(p));
                    temp=voxel(i1,j1,k1).ll(p);
                    %if(temp~=pt1 && temp~=pt2 && not_used(temp,front(1).e1,front(1).e2))
                    if(temp~=pt1 && temp~=pt2 && not_used(temp,pt1,pt2))
                        
                        new_pt=temp;
                        
                        t1=sqrt((Xc(pt1)-Xc(temp))^2+(Yc(pt1)-Yc(temp))^2+(Zc(pt1)-Zc(temp))^2);
                        t2=sqrt((Xc(pt2)-Xc(temp))^2+(Yc(pt2)-Yc(temp))^2+(Zc(pt2)-Zc(temp))^2);
                        
                        if(t1<=del1 && t2<=del1)
                            if(pt1>pt2 && pt1>temp)
                                t=temp;
                                temp=pt1;
                                pt1=t;
                            else
                                if(pt2>pt1 && pt2>temp)
                                    t=temp;
                                    temp=pt2;
                                    pt2=t;
                                end
                            end
                        else
                            continue;
                        end
                        
                        i=struct('x',Xc(pt1),'y',Yc(pt1),'z',Zc(pt1));
                        j=struct('x',Xc(pt2),'y',Yc(pt2),'z',Zc(pt2));
                        c=struct('x',front(1).c(1),'y',front(1).c(2),'z',front(1).c(3));

                        k=struct('x',Xc(temp),'y',Yc(temp),'z',Zc(temp));
                        
                        save('workspace1.mat');
                        %----------------------------------------------
                        %fprintf(fid,'point being considered %d   \n',new_pt);
                        %----------------------------------------------    
                        cijk=help_ball_pivot();
                        if(~isnan(cijk.x))
                            
                            %++++++++++++++++++++++++++++++++++++++++
                            bdry_edge=1;
                            %++++++++++++++++++++++++++++++++++++++++
                            
                            if(check_intersect(pt1,pt2,temp))
                                continue;
                            end
                            %fprintf('pt1 %d pt2 %d pt3 %d',pt1,pt2,new_pt)
                            if(check_pts_in_sphere(cijk))
                                %------------------------------------------
                                fprintf(fid,'\n hurray got it in adjacent voxel %d %d %d \n',i1,j1,k1);
                                fprintf(fid,'new point found inside ball pivot : %d \n',new_pt);
                                %------------------------------------------
                                return;
                            end
                        else
                            %----------------------------------------------
                            fprintf(fid,'sad for this point \n');
                            %----------------------------------------------
                        end
                    end
                end
            end
        end
    end
end

%----------------------------------------------    
fprintf(fid,'alas \n');

%++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
if(bdry_edge==0)
    fprintf(fid,'HI THERE %d \n',size(bdry(pass).pass,1));
    bdry_pass=[
    bdry_3d(pass).pass=cat(1,bdry_3d(pass).pass,[front(1).e1 front(1).e2]);
    save('workspace1.mat');
    fprintf(fid,'HI THERE %d \n',size(bdry_3d(pass).pass,1));
end
%+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

%----------------------------------------------
end

